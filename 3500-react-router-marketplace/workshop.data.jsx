<>
{/*. id */}
workshops-react-router-marketplace
{/*. name */}
Intermedia Marketplace (react router)
{/*. exercises */}

{/*. desc */}

Run the project and answer the following questions

{/*. q */}
Load the project in your browser.

{/*. q */}
How many links do you see? What happens when you click on the links?










{/*. source */}
{/*. file-path */}
src/Data.js
{/*. 1 */}
This file contains the data that we will be displaying to the
        user. It contains two arrays. The first array has two elements, both objects
        , and it represents the items
        being sold. The second array represents the people doing the selling. Each object
        of the first array will the following properties:
- description
- price
- image
- id
- sellerId

Each element of the second array will the following properties:
- id
- name
- rating


{/*. 2 */}
The description property of an item is a string that describes the item. The id property is a
        unique string that can be used to refer to the item. The id property will be useful
        for the exercises. The value of the id property should be unique.

{/*. 3 */}
The sellerId property uniquely identifies the seller in the second array. This represents the person
        selling the item in question.

{/*. 4 */}
The image of the item, relative to the public/ folder  

{/*. 5 */}
Similar to the first item. Notice that the order of the properties is different. The property order never matters.

{/*. 6 */}
The id of the seller. Notice that this id is also used in the first array (can you see it?)

{/*. 7 */}
Information related to the seller

{/*. 8 */}
All the properties of the second seller









{/*. source */}
{/*. file-path */}
src/Item.jsx
{/*. 1 */}
We import the React library (why do we need to import React if we don't use it explicitly?) We create a component
    and export it

{/*. 2 */}
The component has a render method that returns a div react element

{/*. 3 */}
There are 3 props here:
- imageLocation: A string that represents a filename. The filename is relative to the public/ folder
- description: A description of the item
- cost: The price of the item

Every time we use the Item component to create a react element, we need to provide these props.
    

{/*. 4 */}
We also have a sellerId prop. We use this prop to create a link. For example if the
    sellerId prop is <code>{`"ewio"`}</code> then it will be a link to <code>{`"/seller/ewio"`}</code> which will
    display the information related to Jack Frost (see Data.js and App.jsx) . To see
    where this link leads to, please see the <code>{`/seller`}</code> Route in App.jsx

    Every time we create an Item react element, we need to provide the sellerId prop.









{/*. source */}
{/*. file-path */}
src/Seller.jsx
{/*. 1 */}
We import the libraries, create a component and export it.
    (Quiz: does the component name matter?) 

{/*. 2 */}
The component only has a render method

{/*. 3 */}
It returns a div react element. I added a className to make it look nice. The css classes
    card and center are located in App.css

{/*. 4 */}
There is a single prop, which we have called seller.
    Every time this component is used, this prop must be provided. When the prop is provided
    it must refer to an object. This object must have at least two properties
- name
- rating

You can see in App.jsx where this prop is provided.










{/*. source */}
{/*. file-path */}
src/App.jsx
{/*. 1 */}
We are importing
- The css
- React
- The BrowserRouter and Route components
- The Seller and Item components we already created ourselves
- The data that will be shown to the user

Using npm, you will need to install the react-router-dom module. We also create a component and export it.


{/*. 2 */}
The component has a render method which returns a react element. The react element is created from the BrowserRouter component.
We do this because we need to use the Route and Link components and we can only do that if they are placed under the BrowserRouter component
in the virtual DOM.

{/*. 3 */}
We create a route for the <code>{`/`}</code> path. If the path in the address bar matches <code>{`/`}</code> exactly, then the renderAllItems function is called
and the result of the function call is placed in the virtual DOM under this Route element. 

{/*. 4 */}
The renderAllItems function returns a div react element. 

{/*. 5 */}
The children of the div will all be Item react elements. Looking at Data.js, we see that
    initialItems has 2 elements. Therefore, the array generated by map will also have 2 elements
    (why is this?) 

{/*. 6 */}
Looking at Item.jsx, we see that the item component has 4 props
- cost
- sellerId
- imageLocation
- description

(How did we come up with those 4 props?)

Therefore, we must provide these props when we create an element. Looking at Data.js, we see that each
element of the initialItems array is an object. Each of those objects has the following properties
- price
- sellerId
- image
- description

Since <code>{`item`}</code> is the parameter name of the function that we're passing to map, item will refer
to an element of the initialItems array every time this function is called (which is twice. Why?).
Therefore, we can use those properties to populate the props of the Item react element.


{/*. 7 */}
We create a route for the <code>{`/path`}</code> path. Since the path contains the
<code>{`:`}</code> symbol, it is actually a path template.
Here are examples of which paths this Route will match
- /seller/akdfh
- /seller/2342
- /seller/232abc

and here are examples of paths that this route will NOT match
- /
- /sellerabc
- /sellers/abc

When the Route matches the path in the addrss bar, the renderSeller function is called
and the result of the function call is placed in the virtual DOM under this Route element.
the renderSeller function is called with an argument that contains information related
to the path in the address bar . For example, if the path in the address bar is <code>{`/seller/abc`}</code>
then the argument passed to renderSeller will be
<pre>{`
{match: {params: {sid: abc}}}
`}</pre>

and if the path is <code>{`/seller/def`}</code> then the argument will be
<pre>{`
{match: {params: {sid: def}}}
`}</pre>

(where does <code>{`sid`}</code> come from?)


{/*. 8 */}
The renderSeller function has a single parameter that we called routerData. It will refer to the argument
that is passed to the function (by the definition of parameter). See the previous slides for examples of
what kinds of arguments are passed.

{/*. 9 */}
As a convenience, I create a variable that refers to the last part of the path in the address bar. The last
    part of the path in the address bar represents the id of the seller. Which this id, we can get the information
    related to the seller so that we can display it to the user.

{/*. 10 */}
With the id, we can use the filter function to find the seller with the id. initialSellers is a variable
    that refers to an array. The elements of that array are objects. Each object has several properties, including <code>{`id`}</code>
    The function that we give to filter has one parameter. The name we chose for that parameter is seller. Every time
    the function is called, seller will refer to a different object of the initialSellers array. The function returns a
    boolean. That boolean is only true if the id property of the seller matches the sellerId, which is a variable
    that refers to the last part of the path in the address bar. <code>{`filter`}</code> returns an array with all the sellers that match the id.
    Since the ids in Data.jsx are unique, there can be at most one element in that array. We create a variable candidates that
    refers to this array.

{/*. 11 */}
Looking at Seller.jsx, we see that it has a single seller prop. Therefore, if we want to use this component, we need
    to give it that prop. The value of the prop is the first element of the array that we created in the previous slide. If that
    array is empty, then <code>{`candidates[0]`}</code> will be undefined. 









{/*. exercises */}

{/*. desc */}

Go over these questions to deepen your understanding

{/*. q */}
What are the components in this project? What does each component do?

{/*. q */}
For each component, list the props that the component expects

{/*. q */}
What are the valid paths for this web app? What does each path display?

{/*. q */}
Where are the links located?

{/*. q */}
How many path templates are there? What is the name of the placeholder in each path template?










{/*. exercises */}

{/*. desc */}

Exercises

{/*. q */}
Like the previous workshops, make a summary and then reproduce the project from the summary. 

{/*. q */}
There are only 2 items being sold by 2 people. Add 3 additional items and 1 seller. 
    Make sure that every seller is selling at least one item. 

{/*. q */}
There might be 10 boats left and as a buyer I'd like to know that information.

    Add a details page for each item. In the details page, display how many of that item is left in stock.

    HINTS

    Add a "number left in stock" field for each item. To do this, we're going to add a new "item details page" where we will display this information.

You will need to add a route for the details page. The path attribute of that route will look something like 
'/details/:itemId'

You will need to add a function to pass to the render attribute of the route

To extract the itemId in that function, use 
routerData.match.params.itemId
(assuming routerData is the parameter of the function)

    

{/*. q */}
The potential buyers would like to read reviews before making a purchase. Add reviews for the items. 

    Add the reviews to the item details page (already created in a previous question)
    

{/*. q */}
The potential buyers would like to learn more about who wrote each review.

    For each review, put a link to the reviewer. By clicking on the link, the user can see all the reviews that person has written.
    

{/*. q */}
Your users want to see all the items that a seller is selling.

    In the seller details page, display links to the items being sold by that seller. 
    
    Each item should have a link in the seller details page.
    

{/*. q */}
Some users would like to see the list of all the sellers. 

    Add a link on the starting page that displays all the sellers. Create a link for each seller.
    When a user clicks on the link, all the items being sold by that seller will be displayed.	

{/*. q */}
For the sake of the remaining exercise, assume there is only one user using this website.
    They don't need to login. This is unrealistic, but necessary for now.
    Right now the one user on the website cannot purchase items. Let's change this. Put an "add to cart" button on every item details page. 
    Next, create a new page where a user can see their cart. On the top of every page, add a link to the cart. On the cart
    page, add a button to complete the purchase. Users can only buy one of any item

{/*. q */}
For every item in the cart, add a button to remove the item from the cart

{/*. q */}
Right now a user can only buy one of any item. Change this.

{/*. q */}
Add a page where users can see all the items they have previously bought. Put a link to this page on the main page

{/*. q */}
When a user makes a purchase, ask them for their credit card number, cvv and expiration date. Also ask them for the shipping address

{/*. q */}
(super hard question) Add a form to add an item to be sold. For the image, let the seller
    put a url
(Hint: you will need to put your data in the state)











</>